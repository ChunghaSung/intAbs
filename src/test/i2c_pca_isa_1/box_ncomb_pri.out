[WARNING] Global which is neither Integer nor Float
@.str = private unnamed_addr constant [2 x i8] c"0\00", align 1
It is not being monitored (there may be errors en route)
[WARNING] Global which is neither Integer nor Float
@.str.1 = private unnamed_addr constant [7 x i8] c"main.c\00", align 1
It is not being monitored (there may be errors en route)
[WARNING] Global which is neither Integer nor Float
@__PRETTY_FUNCTION__.req1 = private unnamed_addr constant [19 x i8] c"void *req1(void *)\00", align 1
It is not being monitored (there may be errors en route)
[WARNING] Global which is neither Integer nor Float
@__PRETTY_FUNCTION__.req2 = private unnamed_addr constant [19 x i8] c"void *req2(void *)\00", align 1
It is not being monitored (there may be errors en route)
[WARNING] Global which is neither Integer nor Float
@__PRETTY_FUNCTION__.req3 = private unnamed_addr constant [19 x i8] c"void *req3(void *)\00", align 1
It is not being monitored (there may be errors en route)
Rules: (declare-fun dom ((_ BitVec 16) (_ BitVec 16)) Bool)
(declare-fun postDom ((_ BitVec 16) (_ BitVec 16)) Bool)
(declare-fun higher ((_ BitVec 16) (_ BitVec 16)) Bool)
(declare-fun pri ((_ BitVec 16)) Bool)
(declare-fun linehigh ((_ BitVec 16) (_ BitVec 16)) Bool)
(declare-fun ld ((_ BitVec 16) (_ BitVec 16)) Bool)
(declare-fun linepri ((_ BitVec 16) (_ BitVec 16)) Bool)
(declare-fun st ((_ BitVec 16) (_ BitVec 16)) Bool)
(declare-fun nonLastSt ((_ BitVec 16)) Bool)
(declare-fun compLd ((_ BitVec 16)) Bool)
(declare-rel st ((_ BitVec 16) (_ BitVec 16)))
(declare-rel dom ((_ BitVec 16) (_ BitVec 16)))
(declare-rel postDom ((_ BitVec 16) (_ BitVec 16)))
(declare-rel higher ((_ BitVec 16) (_ BitVec 16)))
(declare-rel pri ((_ BitVec 16)))
(declare-rel linehigh ((_ BitVec 16) (_ BitVec 16)))
(declare-rel ld ((_ BitVec 16) (_ BitVec 16)))
(declare-rel nonLastSt ((_ BitVec 16)))
(declare-rel compLd ((_ BitVec 16)))
(declare-rel linepri ((_ BitVec 16) (_ BitVec 16)))
(declare-var A (_ BitVec 16))
(declare-var B (_ BitVec 16))
(declare-var C (_ BitVec 16))
(declare-var D (_ BitVec 16))
(declare-var E (_ BitVec 16))
(rule (=> (and (dom B C) (dom A B)) (dom A C)))
(rule (=> (and (postDom B C) (postDom A B)) (postDom A C)))
(rule (=> (and (pri A) (pri B) (= A #x0000) (= B #x0001)) (higher B A)))
(rule (=> (and (pri A) (pri B) (= A #x0001) (= B #x0002)) (higher B A)))
(rule (=> (and (pri A) (pri B) (= A #x0002) (= B #x0003)) (higher B A)))
(rule (=> (and (pri A) (pri B) (= A #x0003) (= B #x0004)) (higher B A)))
(rule (=> (and (pri A) (pri B) (= A #x0004) (= B #x0005)) (higher B A)))
(rule (=> (and (pri A) (pri B) (= A #x0005) (= B #x0006)) (higher B A)))
(rule (=> (and (pri A) (pri B) (= A #x0006) (= B #x0007)) (higher B A)))
(rule (=> (and (pri A) (pri B) (= A #x0007) (= B #x0008)) (higher B A)))
(rule (=> (and (higher B C) (higher A B)) (higher A C)))
(rule (=> (and (st A B) (higher D E) (linepri C E) (linepri A D) (ld C B))
    (linehigh A C)))
(rule (=> (and (st A B) (postDom A C) (st C B)) (nonLastSt C)))
(rule (=> (and (st A B) (dom A C) (ld C B)) (compLd C)))
(rule (linepri #x003f #x0002))
(rule (st #x003f #x000e))
(rule (pri #x0000))
(rule (pri #x0001))
(rule (pri #x0002))
(rule (pri #x0003))
(rule (pri #x0004))
(rule (pri #x0005))
(rule (pri #x0006))
(rule (pri #x0007))
(rule (pri #x0008))
(rule (postDom #x0040 #x003f))
(rule (dom #x003f #x0040))
(rule (postDom #x0038 #x003a))
(rule (linepri #x003d #x0002))
(rule (st #x003d #x0010))
(rule (linepri #x0038 #x0002))
(rule (st #x0038 #x000f))
(rule (postDom #x003e #x003d))
(rule (dom #x003d #x003e))
(rule (postDom #x003d #x0038))
(rule (dom #x0038 #x003d))
(rule (postDom #x003c #x003b))
(rule (dom #x0009 #x000a))
(rule (postDom #x000a #x0009))
(rule (dom #x000a #x000b))
(rule (postDom #x000b #x000a))
(rule (dom #x000b #x000c))
(rule (postDom #x000c #x000b))
(rule (dom #x000c #x000d))
(rule (postDom #x000d #x000c))
(rule (st #x0009 #x000e))
(rule (linepri #x0009 #x0002))
(rule (st #x000a #x000f))
(rule (linepri #x000a #x0002))
(rule (st #x000b #x0010))
(rule (linepri #x000b #x0002))
(rule (ld #x000c #x0010))
(rule (linepri #x000c #x0002))
(rule (postDom #x0011 #x000d))
(rule (dom #x000d #x0012))
(rule (dom #x000d #x0011))
(rule (dom #x0012 #x0013))
(rule (postDom #x0013 #x0012))
(rule (dom #x0011 #x0014))
(rule (postDom #x0014 #x0011))
(rule (ld #x0011 #x000e))
(rule (linepri #x0011 #x0002))
(rule (dom #x0014 #x0015))
(rule (dom #x0014 #x0016))
(rule (dom #x0015 #x0017))
(rule (postDom #x0017 #x0015))
(rule (ld #x0015 #x000f))
(rule (linepri #x0015 #x0002))
(rule (postDom #x0018 #x0017))
(rule (dom #x0017 #x0019))
(rule (dom #x0017 #x0018))
(rule (dom #x0019 #x001a))
(rule (postDom #x001a #x0019))
(rule (dom #x0016 #x001b))
(rule (postDom #x001b #x0016))
(rule (dom #x001b #x001c))
(rule (postDom #x001c #x001b))
(rule (st #x0016 #x000f))
(rule (linepri #x0016 #x0002))
(rule (st #x001b #x0010))
(rule (linepri #x001b #x0002))
(rule (postDom #x0016 #x0018))
(rule (dom #x001d #x001e))
(rule (postDom #x001e #x001d))
(rule (dom #x001e #x001f))
(rule (postDom #x001f #x001e))
(rule (dom #x001f #x0020))
(rule (postDom #x0020 #x001f))
(rule (dom #x0020 #x0021))
(rule (postDom #x0021 #x0020))
(rule (st #x001d #x000e))
(rule (linepri #x001d #x0002))
(rule (st #x001e #x000f))
(rule (linepri #x001e #x0002))
(rule (st #x001f #x0010))
(rule (linepri #x001f #x0002))
(rule (ld #x0020 #x0010))
(rule (linepri #x0020 #x0002))
(rule (postDom #x0022 #x0021))
(rule (dom #x0021 #x0023))
(rule (dom #x0021 #x0022))
(rule (dom #x0023 #x0024))
(rule (postDom #x0024 #x0023))
(rule (dom #x0022 #x0025))
(rule (postDom #x0025 #x0022))
(rule (ld #x0022 #x000e))
(rule (linepri #x0022 #x0002))
(rule (dom #x0025 #x0026))
(rule (dom #x0025 #x0027))
(rule (dom #x0026 #x0028))
(rule (postDom #x0028 #x0026))
(rule (ld #x0026 #x000f))
(rule (linepri #x0026 #x0002))
(rule (postDom #x0029 #x0028))
(rule (dom #x0028 #x002a))
(rule (dom #x0028 #x0029))
(rule (dom #x002a #x002b))
(rule (postDom #x002b #x002a))
(rule (dom #x0027 #x002c))
(rule (postDom #x002c #x0027))
(rule (dom #x002c #x002d))
(rule (postDom #x002d #x002c))
(rule (st #x0027 #x000f))
(rule (linepri #x0027 #x0002))
(rule (st #x002c #x0010))
(rule (linepri #x002c #x0002))
(rule (postDom #x0027 #x0029))
(rule (dom #x002e #x002f))
(rule (postDom #x002f #x002e))
(rule (dom #x002f #x0030))
(rule (postDom #x0030 #x002f))
(rule (dom #x0030 #x0031))
(rule (postDom #x0031 #x0030))
(rule (dom #x0031 #x0032))
(rule (postDom #x0032 #x0031))
(rule (st #x002e #x000e))
(rule (linepri #x002e #x0002))
(rule (st #x002f #x000f))
(rule (linepri #x002f #x0002))
(rule (st #x0030 #x0010))
(rule (linepri #x0030 #x0002))
(rule (ld #x0031 #x0010))
(rule (linepri #x0031 #x0002))
(rule (postDom #x0033 #x0032))
(rule (dom #x0032 #x0034))
(rule (dom #x0032 #x0033))
(rule (dom #x0034 #x0035))
(rule (postDom #x0035 #x0034))
(rule (dom #x0033 #x0036))
(rule (postDom #x0036 #x0033))
(rule (ld #x0033 #x000e))
(rule (linepri #x0033 #x0002))
(rule (dom #x0036 #x0037))
(rule (dom #x0036 #x0038))
(rule (dom #x0037 #x0039))
(rule (postDom #x0039 #x0037))
(rule (ld #x0037 #x000f))
(rule (linepri #x0037 #x0002))
(rule (postDom #x003a #x0039))
(rule (dom #x0039 #x003b))
(rule (dom #x0039 #x003a))
(rule (dom #x003b #x003c))

[WARNING] Initializing unhandled global type: @.str = private unnamed_addr constant [2 x i8] c"0\00", align 1
Setting to default initial value
[WARNING] Initializing unhandled global type: @.str.1 = private unnamed_addr constant [7 x i8] c"main.c\00", align 1
Setting to default initial value
[WARNING] Initializing unhandled global type: @__PRETTY_FUNCTION__.req1 = private unnamed_addr constant [19 x i8] c"void *req1(void *)\00", align 1
Setting to default initial value
[WARNING] Initializing unhandled global type: @__PRETTY_FUNCTION__.req2 = private unnamed_addr constant [19 x i8] c"void *req2(void *)\00", align 1
Setting to default initial value
[WARNING] Initializing unhandled global type: @__PRETTY_FUNCTION__.req3 = private unnamed_addr constant [19 x i8] c"void *req3(void *)\00", align 1
Setting to default initial value
Interference Iteration: 1
Analyzing thread: 0
Analyzing thread: 1
Analyzing thread: 2
Analyzing thread: 3
Analyzing thread: 4
Interference Iteration: 2
Analyzing thread: 0
======================================
ID of Load: 12
  %0 = load i32, i32* @global_dev, align 4
ID of Store: 31
  store i32 2, i32* @global_dev, align 4
St is NOT nonLast
Load is completeLoad
st is not higher than ld
======================================
======================================
ID of Load: 12
  %0 = load i32, i32* @global_dev, align 4
ID of Store: 44
  store i32 -1, i32* @global_dev, align 4
St is NOT nonLast
Load is completeLoad
st is not higher than ld
======================================
======================================
ID of Load: 12
  %0 = load i32, i32* @global_dev, align 4
ID of Store: 48
  store i32 3, i32* @global_dev, align 4
St is NOT nonLast
Load is completeLoad
st is not higher than ld
======================================
======================================
ID of Load: 12
  %0 = load i32, i32* @global_dev, align 4
ID of Store: 61
  store i32 -1, i32* @global_dev, align 4
St is NOT nonLast
Load is completeLoad
st is not higher than ld
======================================
======================================
ID of Load: 17
  %1 = load i32, i32* @irq, align 4
ID of Store: 29
  store i32 2, i32* @irq, align 4
St is NOT nonLast
Load is completeLoad
st is not higher than ld
======================================
======================================
ID of Load: 17
  %1 = load i32, i32* @irq, align 4
ID of Store: 46
  store i32 3, i32* @irq, align 4
St is NOT nonLast
Load is completeLoad
st is not higher than ld
======================================
======================================
ID of Load: 17
  %1 = load i32, i32* @irq, align 4
ID of Store: 63
  store i32 -1, i32* @irq, align 4
St is NOT nonLast
Load is completeLoad
st is not higher than ld
======================================
======================================
ID of Load: 21
  %2 = load i32, i32* @global_id, align 4
ID of Store: 30
  store i32 2, i32* @global_id, align 4
St is NOT nonLast
Load is completeLoad
st is not higher than ld
======================================
======================================
ID of Load: 21
  %2 = load i32, i32* @global_id, align 4
ID of Store: 39
  store i32 -1, i32* @global_id, align 4
St is NOT nonLast
Load is completeLoad
st is not higher than ld
======================================
======================================
ID of Load: 21
  %2 = load i32, i32* @global_id, align 4
ID of Store: 47
  store i32 3, i32* @global_id, align 4
St is NOT nonLast
Load is completeLoad
st is not higher than ld
======================================
======================================
ID of Load: 21
  %2 = load i32, i32* @global_id, align 4
ID of Store: 56
  store i32 -1, i32* @global_id, align 4
St is NOT nonLast
Load is completeLoad
st is not higher than ld
======================================
Analyzing thread: 1
======================================
ID of Load: 32
  %0 = load i32, i32* @global_dev, align 4
ID of Store: 11
  store i32 1, i32* @global_dev, align 4
St is NOT nonLast
Load is completeLoad
st is not higher than ld
======================================
======================================
ID of Load: 32
  %0 = load i32, i32* @global_dev, align 4
ID of Store: 27
  store i32 -1, i32* @global_dev, align 4
St is NOT nonLast
Load is completeLoad
st is not higher than ld
======================================
======================================
ID of Load: 32
  %0 = load i32, i32* @global_dev, align 4
ID of Store: 48
  store i32 3, i32* @global_dev, align 4
St is NOT nonLast
Load is completeLoad
st is not higher than ld
======================================
======================================
ID of Load: 32
  %0 = load i32, i32* @global_dev, align 4
ID of Store: 61
  store i32 -1, i32* @global_dev, align 4
St is NOT nonLast
Load is completeLoad
st is not higher than ld
======================================
======================================
ID of Load: 34
  %1 = load i32, i32* @irq, align 4
ID of Store: 9
  store i32 1, i32* @irq, align 4
St is NOT nonLast
Load is completeLoad
st is not higher than ld
======================================
======================================
ID of Load: 34
  %1 = load i32, i32* @irq, align 4
ID of Store: 46
  store i32 3, i32* @irq, align 4
St is NOT nonLast
Load is completeLoad
st is not higher than ld
======================================
======================================
ID of Load: 34
  %1 = load i32, i32* @irq, align 4
ID of Store: 63
  store i32 -1, i32* @irq, align 4
St is NOT nonLast
Load is completeLoad
st is not higher than ld
======================================
======================================
ID of Load: 38
  %2 = load i32, i32* @global_id, align 4
ID of Store: 10
  store i32 1, i32* @global_id, align 4
St is NOT nonLast
Load is completeLoad
st is not higher than ld
======================================
======================================
ID of Load: 38
  %2 = load i32, i32* @global_id, align 4
ID of Store: 22
  store i32 -1, i32* @global_id, align 4
St is NOT nonLast
Load is completeLoad
st is not higher than ld
======================================
======================================
ID of Load: 38
  %2 = load i32, i32* @global_id, align 4
ID of Store: 47
  store i32 3, i32* @global_id, align 4
St is NOT nonLast
Load is completeLoad
st is not higher than ld
======================================
======================================
ID of Load: 38
  %2 = load i32, i32* @global_id, align 4
ID of Store: 56
  store i32 -1, i32* @global_id, align 4
St is NOT nonLast
Load is completeLoad
st is not higher than ld
======================================
Analyzing thread: 2
======================================
ID of Load: 55
  %2 = load i32, i32* @global_id, align 4
ID of Store: 10
  store i32 1, i32* @global_id, align 4
St is NOT nonLast
Load is completeLoad
st is not higher than ld
======================================
======================================
ID of Load: 55
  %2 = load i32, i32* @global_id, align 4
ID of Store: 22
  store i32 -1, i32* @global_id, align 4
St is NOT nonLast
Load is completeLoad
st is not higher than ld
======================================
======================================
ID of Load: 55
  %2 = load i32, i32* @global_id, align 4
ID of Store: 30
  store i32 2, i32* @global_id, align 4
St is NOT nonLast
Load is completeLoad
st is not higher than ld
======================================
======================================
ID of Load: 55
  %2 = load i32, i32* @global_id, align 4
ID of Store: 39
  store i32 -1, i32* @global_id, align 4
St is NOT nonLast
Load is completeLoad
st is not higher than ld
======================================
======================================
ID of Load: 49
  %0 = load i32, i32* @global_dev, align 4
ID of Store: 11
  store i32 1, i32* @global_dev, align 4
St is NOT nonLast
Load is completeLoad
st is not higher than ld
======================================
======================================
ID of Load: 49
  %0 = load i32, i32* @global_dev, align 4
ID of Store: 27
  store i32 -1, i32* @global_dev, align 4
St is NOT nonLast
Load is completeLoad
st is not higher than ld
======================================
======================================
ID of Load: 49
  %0 = load i32, i32* @global_dev, align 4
ID of Store: 31
  store i32 2, i32* @global_dev, align 4
St is NOT nonLast
Load is completeLoad
st is not higher than ld
======================================
======================================
ID of Load: 49
  %0 = load i32, i32* @global_dev, align 4
ID of Store: 44
  store i32 -1, i32* @global_dev, align 4
St is NOT nonLast
Load is completeLoad
st is not higher than ld
======================================
======================================
ID of Load: 51
  %1 = load i32, i32* @irq, align 4
ID of Store: 9
  store i32 1, i32* @irq, align 4
St is NOT nonLast
Load is completeLoad
st is not higher than ld
======================================
======================================
ID of Load: 51
  %1 = load i32, i32* @irq, align 4
ID of Store: 29
  store i32 2, i32* @irq, align 4
St is NOT nonLast
Load is completeLoad
st is not higher than ld
======================================
======================================
ID of Load: 51
  %1 = load i32, i32* @irq, align 4
ID of Store: 63
  store i32 -1, i32* @irq, align 4
St is NOT nonLast
Load is completeLoad
st is not higher than ld
======================================
Analyzing thread: 3
Analyzing thread: 4
v20: @irq = common global i32 0, align 4
v16:   %2 = load i32, i32* @global_id, align 4
v17:   %cmp3 = icmp ne i32 %2, 3
v28: @cnt5 = common global i32 0, align 4
v21: @global_id = common global i32 0, align 4
v22: @global_dev = common global i32 0, align 4
v30: i8* %unused
v23: @global_clock = common global i32 0, align 4
v24: @cnt1 = common global i32 0, align 4
v25: @cnt2 = common global i32 0, align 4
v26: @cnt3 = common global i32 0, align 4
v27: @cnt4 = common global i32 0, align 4
v29: @cnt6 = common global i32 0, align 4
v0:   %0 = load i32, i32* @global_dev, align 4
v1:   %cmp = icmp ne i32 %0, 1
v32: i8* %1
v31: i8* %0
v2:   %1 = load i32, i32* @irq, align 4
v3:   %cmp1 = icmp sgt i32 %1, -1
v34: i8* %3
v33: i32 %2
v4:   %2 = load i32, i32* @global_id, align 4
v5:   %cmp3 = icmp ne i32 %2, 1
v35: i8* %unused
v6:   %0 = load i32, i32* @global_dev, align 4
v7:   %cmp = icmp ne i32 %0, 2
v36: i8* %unused
v8:   %1 = load i32, i32* @irq, align 4
v9:   %cmp1 = icmp sgt i32 %1, -1
v10:   %2 = load i32, i32* @global_id, align 4
v11:   %cmp3 = icmp ne i32 %2, 2
v12:   %0 = load i32, i32* @global_dev, align 4
v13:   %cmp = icmp ne i32 %0, 3
v37: i8* %unused
v14:   %1 = load i32, i32* @irq, align 4
v15:   %cmp1 = icmp sgt i32 %1, -1
v18:   %t1 = alloca i64, align 8
v19:   %t2 = alloca i64, align 8
v38: i64* %0
v39: %union.pthread_attr_t* %1
v40: i8* (i8*)* %2
v41: i8* %3
==== req1() Results ====
BasicBlock: 
entry:
  store i32 1, i32* @irq, align 4
  store i32 1, i32* @global_id, align 4
  store i32 1, i32* @global_dev, align 4
  %0 = load i32, i32* @global_dev, align 4
  %cmp = icmp ne i32 %0, 1
  br i1 %cmp, label %if.then, label %if.end
Facts: interval of dim (42,0):
      v0 in [-oo,+oo]
      v1 in [-oo,+oo]
     v10 in [-oo,+oo]
     v11 in [-oo,+oo]
     v12 in [-oo,+oo]
     v13 in [-oo,+oo]
     v14 in [-oo,+oo]
     v15 in [-oo,+oo]
     v16 in [-oo,+oo]
     v17 in [-oo,+oo]
     v18 in [-oo,+oo]
     v19 in [-oo,+oo]
      v2 in [-oo,+oo]
     v20 in [0,0]
     v21 in [0,0]
     v22 in [0,0]
     v23 in [0,0]
     v24 in [0,0]
     v25 in [0,0]
     v26 in [0,0]
     v27 in [0,0]
     v28 in [0,0]
     v29 in [0,0]
      v3 in [-oo,+oo]
     v30 in [-oo,+oo]
     v31 in [-oo,+oo]
     v32 in [-oo,+oo]
     v33 in [-oo,+oo]
     v34 in [-oo,+oo]
     v35 in [-oo,+oo]
     v36 in [-oo,+oo]
     v37 in [-oo,+oo]
     v38 in [-oo,+oo]
     v39 in [-oo,+oo]
      v4 in [-oo,+oo]
     v40 in [-oo,+oo]
     v41 in [-oo,+oo]
      v5 in [-oo,+oo]
      v6 in [-oo,+oo]
      v7 in [-oo,+oo]
      v8 in [-oo,+oo]
      v9 in [-oo,+oo]

BasicBlock: 
if.then:                                          ; preds = %entry
  call void @__assert_fail(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i32 277, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @__PRETTY_FUNCTION__.req1, i32 0, i32 0)) #3
  unreachable
Facts: interval of dim (42,0): bottom

BasicBlock: 
if.end:                                           ; preds = %entry
  %1 = load i32, i32* @irq, align 4
  %cmp1 = icmp sgt i32 %1, -1
  br i1 %cmp1, label %if.then2, label %if.end6
Facts: interval of dim (42,0):
      v0 in [1,1]
      v1 in [0,0]
     v10 in [-oo,+oo]
     v11 in [-oo,+oo]
     v12 in [-oo,+oo]
     v13 in [-oo,+oo]
     v14 in [-oo,+oo]
     v15 in [-oo,+oo]
     v16 in [-oo,+oo]
     v17 in [-oo,+oo]
     v18 in [-oo,+oo]
     v19 in [-oo,+oo]
      v2 in [-oo,+oo]
     v20 in [1,1]
     v21 in [1,1]
     v22 in [1,1]
     v23 in [0,0]
     v24 in [0,0]
     v25 in [0,0]
     v26 in [0,0]
     v27 in [0,0]
     v28 in [0,0]
     v29 in [0,0]
      v3 in [-oo,+oo]
     v30 in [-oo,+oo]
     v31 in [-oo,+oo]
     v32 in [-oo,+oo]
     v33 in [-oo,+oo]
     v34 in [-oo,+oo]
     v35 in [-oo,+oo]
     v36 in [-oo,+oo]
     v37 in [-oo,+oo]
     v38 in [-oo,+oo]
     v39 in [-oo,+oo]
      v4 in [-oo,+oo]
     v40 in [-oo,+oo]
     v41 in [-oo,+oo]
      v5 in [-oo,+oo]
      v6 in [-oo,+oo]
      v7 in [-oo,+oo]
      v8 in [-oo,+oo]
      v9 in [-oo,+oo]

BasicBlock: 
if.then2:                                         ; preds = %if.end
  %2 = load i32, i32* @global_id, align 4
  %cmp3 = icmp ne i32 %2, 1
  br i1 %cmp3, label %if.then4, label %if.end5
Facts: interval of dim (42,0):
      v0 in [1,1]
      v1 in [0,0]
     v10 in [-oo,+oo]
     v11 in [-oo,+oo]
     v12 in [-oo,+oo]
     v13 in [-oo,+oo]
     v14 in [-oo,+oo]
     v15 in [-oo,+oo]
     v16 in [-oo,+oo]
     v17 in [-oo,+oo]
     v18 in [-oo,+oo]
     v19 in [-oo,+oo]
      v2 in [1,1]
     v20 in [1,1]
     v21 in [1,1]
     v22 in [1,1]
     v23 in [0,0]
     v24 in [0,0]
     v25 in [0,0]
     v26 in [0,0]
     v27 in [0,0]
     v28 in [0,0]
     v29 in [0,0]
      v3 in [1,1]
     v30 in [-oo,+oo]
     v31 in [-oo,+oo]
     v32 in [-oo,+oo]
     v33 in [-oo,+oo]
     v34 in [-oo,+oo]
     v35 in [-oo,+oo]
     v36 in [-oo,+oo]
     v37 in [-oo,+oo]
     v38 in [-oo,+oo]
     v39 in [-oo,+oo]
      v4 in [-oo,+oo]
     v40 in [-oo,+oo]
     v41 in [-oo,+oo]
      v5 in [-oo,+oo]
      v6 in [-oo,+oo]
      v7 in [-oo,+oo]
      v8 in [-oo,+oo]
      v9 in [-oo,+oo]

BasicBlock: 
if.end6:                                          ; preds = %if.end5, %if.end
  store i32 -1, i32* @global_id, align 4
  store i32 -1, i32* @global_dev, align 4
  ret i8* undef
Facts: interval of dim (42,0):
      v0 in [1,1]
      v1 in [0,0]
     v10 in [-oo,+oo]
     v11 in [-oo,+oo]
     v12 in [-oo,+oo]
     v13 in [-oo,+oo]
     v14 in [-oo,+oo]
     v15 in [-oo,+oo]
     v16 in [-oo,+oo]
     v17 in [-oo,+oo]
     v18 in [-oo,+oo]
     v19 in [-oo,+oo]
      v2 in [1,1]
     v20 in [1,1]
     v21 in [1,1]
     v22 in [1,1]
     v23 in [0,0]
     v24 in [0,0]
     v25 in [0,0]
     v26 in [0,0]
     v27 in [0,0]
     v28 in [0,0]
     v29 in [0,0]
      v3 in [1,1]
     v30 in [-oo,+oo]
     v31 in [-oo,+oo]
     v32 in [-oo,+oo]
     v33 in [-oo,+oo]
     v34 in [-oo,+oo]
     v35 in [-oo,+oo]
     v36 in [-oo,+oo]
     v37 in [-oo,+oo]
     v38 in [-oo,+oo]
     v39 in [-oo,+oo]
      v4 in [1,1]
     v40 in [-oo,+oo]
     v41 in [-oo,+oo]
      v5 in [0,0]
      v6 in [-oo,+oo]
      v7 in [-oo,+oo]
      v8 in [-oo,+oo]
      v9 in [-oo,+oo]

BasicBlock: 
if.then4:                                         ; preds = %if.then2
  call void @__assert_fail(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i32 277, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @__PRETTY_FUNCTION__.req1, i32 0, i32 0)) #3
  unreachable
Facts: interval of dim (42,0): bottom

BasicBlock: 
if.end5:                                          ; preds = %if.then2
  br label %if.end6
Facts: interval of dim (42,0):
      v0 in [1,1]
      v1 in [0,0]
     v10 in [-oo,+oo]
     v11 in [-oo,+oo]
     v12 in [-oo,+oo]
     v13 in [-oo,+oo]
     v14 in [-oo,+oo]
     v15 in [-oo,+oo]
     v16 in [-oo,+oo]
     v17 in [-oo,+oo]
     v18 in [-oo,+oo]
     v19 in [-oo,+oo]
      v2 in [1,1]
     v20 in [1,1]
     v21 in [1,1]
     v22 in [1,1]
     v23 in [0,0]
     v24 in [0,0]
     v25 in [0,0]
     v26 in [0,0]
     v27 in [0,0]
     v28 in [0,0]
     v29 in [0,0]
      v3 in [1,1]
     v30 in [-oo,+oo]
     v31 in [-oo,+oo]
     v32 in [-oo,+oo]
     v33 in [-oo,+oo]
     v34 in [-oo,+oo]
     v35 in [-oo,+oo]
     v36 in [-oo,+oo]
     v37 in [-oo,+oo]
     v38 in [-oo,+oo]
     v39 in [-oo,+oo]
      v4 in [1,1]
     v40 in [-oo,+oo]
     v41 in [-oo,+oo]
      v5 in [0,0]
      v6 in [-oo,+oo]
      v7 in [-oo,+oo]
      v8 in [-oo,+oo]
      v9 in [-oo,+oo]

======================
==== req2() Results ====
BasicBlock: 
entry:
  store i32 2, i32* @irq, align 4
  store i32 2, i32* @global_id, align 4
  store i32 2, i32* @global_dev, align 4
  %0 = load i32, i32* @global_dev, align 4
  %cmp = icmp ne i32 %0, 2
  br i1 %cmp, label %if.then, label %if.end
Facts: interval of dim (42,0):
      v0 in [-oo,+oo]
      v1 in [-oo,+oo]
     v10 in [-oo,+oo]
     v11 in [-oo,+oo]
     v12 in [-oo,+oo]
     v13 in [-oo,+oo]
     v14 in [-oo,+oo]
     v15 in [-oo,+oo]
     v16 in [-oo,+oo]
     v17 in [-oo,+oo]
     v18 in [-oo,+oo]
     v19 in [-oo,+oo]
      v2 in [-oo,+oo]
     v20 in [0,0]
     v21 in [0,0]
     v22 in [0,0]
     v23 in [0,0]
     v24 in [0,0]
     v25 in [0,0]
     v26 in [0,0]
     v27 in [0,0]
     v28 in [0,0]
     v29 in [0,0]
      v3 in [-oo,+oo]
     v30 in [-oo,+oo]
     v31 in [-oo,+oo]
     v32 in [-oo,+oo]
     v33 in [-oo,+oo]
     v34 in [-oo,+oo]
     v35 in [-oo,+oo]
     v36 in [-oo,+oo]
     v37 in [-oo,+oo]
     v38 in [-oo,+oo]
     v39 in [-oo,+oo]
      v4 in [-oo,+oo]
     v40 in [-oo,+oo]
     v41 in [-oo,+oo]
      v5 in [-oo,+oo]
      v6 in [-oo,+oo]
      v7 in [-oo,+oo]
      v8 in [-oo,+oo]
      v9 in [-oo,+oo]

BasicBlock: 
if.then:                                          ; preds = %entry
  call void @__assert_fail(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i32 287, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @__PRETTY_FUNCTION__.req2, i32 0, i32 0)) #3
  unreachable
Facts: interval of dim (42,0): bottom

BasicBlock: 
if.end:                                           ; preds = %entry
  %1 = load i32, i32* @irq, align 4
  %cmp1 = icmp sgt i32 %1, -1
  br i1 %cmp1, label %if.then2, label %if.end6
Facts: interval of dim (42,0):
      v0 in [-oo,+oo]
      v1 in [-oo,+oo]
     v10 in [-oo,+oo]
     v11 in [-oo,+oo]
     v12 in [-oo,+oo]
     v13 in [-oo,+oo]
     v14 in [-oo,+oo]
     v15 in [-oo,+oo]
     v16 in [-oo,+oo]
     v17 in [-oo,+oo]
     v18 in [-oo,+oo]
     v19 in [-oo,+oo]
      v2 in [-oo,+oo]
     v20 in [2,2]
     v21 in [2,2]
     v22 in [2,2]
     v23 in [0,0]
     v24 in [0,0]
     v25 in [0,0]
     v26 in [0,0]
     v27 in [0,0]
     v28 in [0,0]
     v29 in [0,0]
      v3 in [-oo,+oo]
     v30 in [-oo,+oo]
     v31 in [-oo,+oo]
     v32 in [-oo,+oo]
     v33 in [-oo,+oo]
     v34 in [-oo,+oo]
     v35 in [-oo,+oo]
     v36 in [-oo,+oo]
     v37 in [-oo,+oo]
     v38 in [-oo,+oo]
     v39 in [-oo,+oo]
      v4 in [-oo,+oo]
     v40 in [-oo,+oo]
     v41 in [-oo,+oo]
      v5 in [-oo,+oo]
      v6 in [2,2]
      v7 in [0,0]
      v8 in [-oo,+oo]
      v9 in [-oo,+oo]

BasicBlock: 
if.then2:                                         ; preds = %if.end
  %2 = load i32, i32* @global_id, align 4
  %cmp3 = icmp ne i32 %2, 2
  br i1 %cmp3, label %if.then4, label %if.end5
Facts: interval of dim (42,0):
      v0 in [-oo,+oo]
      v1 in [-oo,+oo]
     v10 in [-oo,+oo]
     v11 in [-oo,+oo]
     v12 in [-oo,+oo]
     v13 in [-oo,+oo]
     v14 in [-oo,+oo]
     v15 in [-oo,+oo]
     v16 in [-oo,+oo]
     v17 in [-oo,+oo]
     v18 in [-oo,+oo]
     v19 in [-oo,+oo]
      v2 in [-oo,+oo]
     v20 in [2,2]
     v21 in [2,2]
     v22 in [2,2]
     v23 in [0,0]
     v24 in [0,0]
     v25 in [0,0]
     v26 in [0,0]
     v27 in [0,0]
     v28 in [0,0]
     v29 in [0,0]
      v3 in [-oo,+oo]
     v30 in [-oo,+oo]
     v31 in [-oo,+oo]
     v32 in [-oo,+oo]
     v33 in [-oo,+oo]
     v34 in [-oo,+oo]
     v35 in [-oo,+oo]
     v36 in [-oo,+oo]
     v37 in [-oo,+oo]
     v38 in [-oo,+oo]
     v39 in [-oo,+oo]
      v4 in [-oo,+oo]
     v40 in [-oo,+oo]
     v41 in [-oo,+oo]
      v5 in [-oo,+oo]
      v6 in [2,2]
      v7 in [0,0]
      v8 in [2,2]
      v9 in [1,1]

BasicBlock: 
if.end6:                                          ; preds = %if.end5, %if.end
  store i32 -1, i32* @global_id, align 4
  store i32 -1, i32* @global_dev, align 4
  ret i8* undef
Facts: interval of dim (42,0):
      v0 in [-oo,+oo]
      v1 in [-oo,+oo]
     v10 in [2,2]
     v11 in [0,0]
     v12 in [-oo,+oo]
     v13 in [-oo,+oo]
     v14 in [-oo,+oo]
     v15 in [-oo,+oo]
     v16 in [-oo,+oo]
     v17 in [-oo,+oo]
     v18 in [-oo,+oo]
     v19 in [-oo,+oo]
      v2 in [-oo,+oo]
     v20 in [2,2]
     v21 in [2,2]
     v22 in [2,2]
     v23 in [0,0]
     v24 in [0,0]
     v25 in [0,0]
     v26 in [0,0]
     v27 in [0,0]
     v28 in [0,0]
     v29 in [0,0]
      v3 in [-oo,+oo]
     v30 in [-oo,+oo]
     v31 in [-oo,+oo]
     v32 in [-oo,+oo]
     v33 in [-oo,+oo]
     v34 in [-oo,+oo]
     v35 in [-oo,+oo]
     v36 in [-oo,+oo]
     v37 in [-oo,+oo]
     v38 in [-oo,+oo]
     v39 in [-oo,+oo]
      v4 in [-oo,+oo]
     v40 in [-oo,+oo]
     v41 in [-oo,+oo]
      v5 in [-oo,+oo]
      v6 in [2,2]
      v7 in [0,0]
      v8 in [2,2]
      v9 in [1,1]

BasicBlock: 
if.then4:                                         ; preds = %if.then2
  call void @__assert_fail(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i32 287, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @__PRETTY_FUNCTION__.req2, i32 0, i32 0)) #3
  unreachable
Facts: interval of dim (42,0): bottom

BasicBlock: 
if.end5:                                          ; preds = %if.then2
  br label %if.end6
Facts: interval of dim (42,0):
      v0 in [-oo,+oo]
      v1 in [-oo,+oo]
     v10 in [2,2]
     v11 in [0,0]
     v12 in [-oo,+oo]
     v13 in [-oo,+oo]
     v14 in [-oo,+oo]
     v15 in [-oo,+oo]
     v16 in [-oo,+oo]
     v17 in [-oo,+oo]
     v18 in [-oo,+oo]
     v19 in [-oo,+oo]
      v2 in [-oo,+oo]
     v20 in [2,2]
     v21 in [2,2]
     v22 in [2,2]
     v23 in [0,0]
     v24 in [0,0]
     v25 in [0,0]
     v26 in [0,0]
     v27 in [0,0]
     v28 in [0,0]
     v29 in [0,0]
      v3 in [-oo,+oo]
     v30 in [-oo,+oo]
     v31 in [-oo,+oo]
     v32 in [-oo,+oo]
     v33 in [-oo,+oo]
     v34 in [-oo,+oo]
     v35 in [-oo,+oo]
     v36 in [-oo,+oo]
     v37 in [-oo,+oo]
     v38 in [-oo,+oo]
     v39 in [-oo,+oo]
      v4 in [-oo,+oo]
     v40 in [-oo,+oo]
     v41 in [-oo,+oo]
      v5 in [-oo,+oo]
      v6 in [2,2]
      v7 in [0,0]
      v8 in [2,2]
      v9 in [1,1]

======================
==== req3() Results ====
BasicBlock: 
if.end6:                                          ; preds = %if.end5, %if.end
  store i32 -1, i32* @global_id, align 4
  store i32 -1, i32* @global_dev, align 4
  ret i8* undef
Facts: interval of dim (42,0):
      v0 in [-oo,+oo]
      v1 in [-oo,+oo]
     v10 in [-oo,+oo]
     v11 in [-oo,+oo]
     v12 in [3,3]
     v13 in [0,0]
     v14 in [3,3]
     v15 in [1,1]
     v16 in [3,3]
     v17 in [0,0]
     v18 in [-oo,+oo]
     v19 in [-oo,+oo]
      v2 in [-oo,+oo]
     v20 in [3,3]
     v21 in [3,3]
     v22 in [3,3]
     v23 in [0,0]
     v24 in [0,0]
     v25 in [0,0]
     v26 in [0,0]
     v27 in [0,0]
     v28 in [0,0]
     v29 in [0,0]
      v3 in [-oo,+oo]
     v30 in [-oo,+oo]
     v31 in [-oo,+oo]
     v32 in [-oo,+oo]
     v33 in [-oo,+oo]
     v34 in [-oo,+oo]
     v35 in [-oo,+oo]
     v36 in [-oo,+oo]
     v37 in [-oo,+oo]
     v38 in [-oo,+oo]
     v39 in [-oo,+oo]
      v4 in [-oo,+oo]
     v40 in [-oo,+oo]
     v41 in [-oo,+oo]
      v5 in [-oo,+oo]
      v6 in [-oo,+oo]
      v7 in [-oo,+oo]
      v8 in [-oo,+oo]
      v9 in [-oo,+oo]

BasicBlock: 
if.then4:                                         ; preds = %if.then2
  call void @__assert_fail(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i32 297, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @__PRETTY_FUNCTION__.req3, i32 0, i32 0)) #3
  unreachable
Facts: interval of dim (42,0): bottom

BasicBlock: 
if.end5:                                          ; preds = %if.then2
  br label %if.end6
Facts: interval of dim (42,0):
      v0 in [-oo,+oo]
      v1 in [-oo,+oo]
     v10 in [-oo,+oo]
     v11 in [-oo,+oo]
     v12 in [3,3]
     v13 in [0,0]
     v14 in [3,3]
     v15 in [1,1]
     v16 in [3,3]
     v17 in [0,0]
     v18 in [-oo,+oo]
     v19 in [-oo,+oo]
      v2 in [-oo,+oo]
     v20 in [3,3]
     v21 in [3,3]
     v22 in [3,3]
     v23 in [0,0]
     v24 in [0,0]
     v25 in [0,0]
     v26 in [0,0]
     v27 in [0,0]
     v28 in [0,0]
     v29 in [0,0]
      v3 in [-oo,+oo]
     v30 in [-oo,+oo]
     v31 in [-oo,+oo]
     v32 in [-oo,+oo]
     v33 in [-oo,+oo]
     v34 in [-oo,+oo]
     v35 in [-oo,+oo]
     v36 in [-oo,+oo]
     v37 in [-oo,+oo]
     v38 in [-oo,+oo]
     v39 in [-oo,+oo]
      v4 in [-oo,+oo]
     v40 in [-oo,+oo]
     v41 in [-oo,+oo]
      v5 in [-oo,+oo]
      v6 in [-oo,+oo]
      v7 in [-oo,+oo]
      v8 in [-oo,+oo]
      v9 in [-oo,+oo]

BasicBlock: 
entry:
  store i32 3, i32* @irq, align 4
  store i32 3, i32* @global_id, align 4
  store i32 3, i32* @global_dev, align 4
  %0 = load i32, i32* @global_dev, align 4
  %cmp = icmp ne i32 %0, 3
  br i1 %cmp, label %if.then, label %if.end
Facts: interval of dim (42,0):
      v0 in [-oo,+oo]
      v1 in [-oo,+oo]
     v10 in [-oo,+oo]
     v11 in [-oo,+oo]
     v12 in [-oo,+oo]
     v13 in [-oo,+oo]
     v14 in [-oo,+oo]
     v15 in [-oo,+oo]
     v16 in [-oo,+oo]
     v17 in [-oo,+oo]
     v18 in [-oo,+oo]
     v19 in [-oo,+oo]
      v2 in [-oo,+oo]
     v20 in [0,0]
     v21 in [0,0]
     v22 in [0,0]
     v23 in [0,0]
     v24 in [0,0]
     v25 in [0,0]
     v26 in [0,0]
     v27 in [0,0]
     v28 in [0,0]
     v29 in [0,0]
      v3 in [-oo,+oo]
     v30 in [-oo,+oo]
     v31 in [-oo,+oo]
     v32 in [-oo,+oo]
     v33 in [-oo,+oo]
     v34 in [-oo,+oo]
     v35 in [-oo,+oo]
     v36 in [-oo,+oo]
     v37 in [-oo,+oo]
     v38 in [-oo,+oo]
     v39 in [-oo,+oo]
      v4 in [-oo,+oo]
     v40 in [-oo,+oo]
     v41 in [-oo,+oo]
      v5 in [-oo,+oo]
      v6 in [-oo,+oo]
      v7 in [-oo,+oo]
      v8 in [-oo,+oo]
      v9 in [-oo,+oo]

BasicBlock: 
if.then:                                          ; preds = %entry
  call void @__assert_fail(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i32 297, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @__PRETTY_FUNCTION__.req3, i32 0, i32 0)) #3
  unreachable
Facts: interval of dim (42,0): bottom

BasicBlock: 
if.end:                                           ; preds = %entry
  %1 = load i32, i32* @irq, align 4
  %cmp1 = icmp sgt i32 %1, -1
  br i1 %cmp1, label %if.then2, label %if.end6
Facts: interval of dim (42,0):
      v0 in [-oo,+oo]
      v1 in [-oo,+oo]
     v10 in [-oo,+oo]
     v11 in [-oo,+oo]
     v12 in [3,3]
     v13 in [0,0]
     v14 in [-oo,+oo]
     v15 in [-oo,+oo]
     v16 in [-oo,+oo]
     v17 in [-oo,+oo]
     v18 in [-oo,+oo]
     v19 in [-oo,+oo]
      v2 in [-oo,+oo]
     v20 in [3,3]
     v21 in [3,3]
     v22 in [3,3]
     v23 in [0,0]
     v24 in [0,0]
     v25 in [0,0]
     v26 in [0,0]
     v27 in [0,0]
     v28 in [0,0]
     v29 in [0,0]
      v3 in [-oo,+oo]
     v30 in [-oo,+oo]
     v31 in [-oo,+oo]
     v32 in [-oo,+oo]
     v33 in [-oo,+oo]
     v34 in [-oo,+oo]
     v35 in [-oo,+oo]
     v36 in [-oo,+oo]
     v37 in [-oo,+oo]
     v38 in [-oo,+oo]
     v39 in [-oo,+oo]
      v4 in [-oo,+oo]
     v40 in [-oo,+oo]
     v41 in [-oo,+oo]
      v5 in [-oo,+oo]
      v6 in [-oo,+oo]
      v7 in [-oo,+oo]
      v8 in [-oo,+oo]
      v9 in [-oo,+oo]

BasicBlock: 
if.then2:                                         ; preds = %if.end
  %2 = load i32, i32* @global_id, align 4
  %cmp3 = icmp ne i32 %2, 3
  br i1 %cmp3, label %if.then4, label %if.end5
Facts: interval of dim (42,0):
      v0 in [-oo,+oo]
      v1 in [-oo,+oo]
     v10 in [-oo,+oo]
     v11 in [-oo,+oo]
     v12 in [3,3]
     v13 in [0,0]
     v14 in [3,3]
     v15 in [1,1]
     v16 in [-oo,+oo]
     v17 in [-oo,+oo]
     v18 in [-oo,+oo]
     v19 in [-oo,+oo]
      v2 in [-oo,+oo]
     v20 in [3,3]
     v21 in [3,3]
     v22 in [3,3]
     v23 in [0,0]
     v24 in [0,0]
     v25 in [0,0]
     v26 in [0,0]
     v27 in [0,0]
     v28 in [0,0]
     v29 in [0,0]
      v3 in [-oo,+oo]
     v30 in [-oo,+oo]
     v31 in [-oo,+oo]
     v32 in [-oo,+oo]
     v33 in [-oo,+oo]
     v34 in [-oo,+oo]
     v35 in [-oo,+oo]
     v36 in [-oo,+oo]
     v37 in [-oo,+oo]
     v38 in [-oo,+oo]
     v39 in [-oo,+oo]
      v4 in [-oo,+oo]
     v40 in [-oo,+oo]
     v41 in [-oo,+oo]
      v5 in [-oo,+oo]
      v6 in [-oo,+oo]
      v7 in [-oo,+oo]
      v8 in [-oo,+oo]
      v9 in [-oo,+oo]

======================
==== req4() Results ====
BasicBlock: 
entry:
  store i32 -1, i32* @irq, align 4
  ret i8* undef
Facts: interval of dim (42,0):
      v0 in [-oo,+oo]
      v1 in [-oo,+oo]
     v10 in [-oo,+oo]
     v11 in [-oo,+oo]
     v12 in [-oo,+oo]
     v13 in [-oo,+oo]
     v14 in [-oo,+oo]
     v15 in [-oo,+oo]
     v16 in [-oo,+oo]
     v17 in [-oo,+oo]
     v18 in [-oo,+oo]
     v19 in [-oo,+oo]
      v2 in [-oo,+oo]
     v20 in [0,0]
     v21 in [0,0]
     v22 in [0,0]
     v23 in [0,0]
     v24 in [0,0]
     v25 in [0,0]
     v26 in [0,0]
     v27 in [0,0]
     v28 in [0,0]
     v29 in [0,0]
      v3 in [-oo,+oo]
     v30 in [-oo,+oo]
     v31 in [-oo,+oo]
     v32 in [-oo,+oo]
     v33 in [-oo,+oo]
     v34 in [-oo,+oo]
     v35 in [-oo,+oo]
     v36 in [-oo,+oo]
     v37 in [-oo,+oo]
     v38 in [-oo,+oo]
     v39 in [-oo,+oo]
      v4 in [-oo,+oo]
     v40 in [-oo,+oo]
     v41 in [-oo,+oo]
      v5 in [-oo,+oo]
      v6 in [-oo,+oo]
      v7 in [-oo,+oo]
      v8 in [-oo,+oo]
      v9 in [-oo,+oo]

======================
==== main() Results ====
BasicBlock: 
entry:
  %t1 = alloca i64, align 8
  %t2 = alloca i64, align 8
  %call = call i32 @pthread_create(i64* %t1, %union.pthread_attr_t* null, i8* (i8*)* @req1, i8* null) #3
  %call1 = call i32 @pthread_create(i64* %t2, %union.pthread_attr_t* null, i8* (i8*)* @req2, i8* null) #3
  %call2 = call i32 @pthread_create(i64* %t2, %union.pthread_attr_t* null, i8* (i8*)* @req3, i8* null) #3
  %call3 = call i32 @pthread_create(i64* %t2, %union.pthread_attr_t* null, i8* (i8*)* @req4, i8* null) #3
  ret i32 0
Facts: interval of dim (42,0):
      v0 in [-oo,+oo]
      v1 in [-oo,+oo]
     v10 in [-oo,+oo]
     v11 in [-oo,+oo]
     v12 in [-oo,+oo]
     v13 in [-oo,+oo]
     v14 in [-oo,+oo]
     v15 in [-oo,+oo]
     v16 in [-oo,+oo]
     v17 in [-oo,+oo]
     v18 in [-oo,+oo]
     v19 in [-oo,+oo]
      v2 in [-oo,+oo]
     v20 in [0,0]
     v21 in [0,0]
     v22 in [0,0]
     v23 in [0,0]
     v24 in [0,0]
     v25 in [0,0]
     v26 in [0,0]
     v27 in [0,0]
     v28 in [0,0]
     v29 in [0,0]
      v3 in [-oo,+oo]
     v30 in [-oo,+oo]
     v31 in [-oo,+oo]
     v32 in [-oo,+oo]
     v33 in [-oo,+oo]
     v34 in [-oo,+oo]
     v35 in [-oo,+oo]
     v36 in [-oo,+oo]
     v37 in [-oo,+oo]
     v38 in [-oo,+oo]
     v39 in [-oo,+oo]
      v4 in [-oo,+oo]
     v40 in [-oo,+oo]
     v41 in [-oo,+oo]
      v5 in [-oo,+oo]
      v6 in [-oo,+oo]
      v7 in [-oo,+oo]
      v8 in [-oo,+oo]
      v9 in [-oo,+oo]

======================
[WARNING] Value not dumped to metadata: @irq = common global i32 0, align 4
	type not handled
[WARNING] Value not dumped to metadata: @global_id = common global i32 0, align 4
	type not handled
[WARNING] Value not dumped to metadata: @global_dev = common global i32 0, align 4
	type not handled
Errors found: 0
Max Permutations: 0
Total pairs: 33
Filtered pairs: 33
