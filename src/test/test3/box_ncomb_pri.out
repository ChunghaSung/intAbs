[WARNING] Global which is neither Integer nor Float
@.str = private unnamed_addr constant [2 x i8] c"0\00", align 1
It is not being monitored (there may be errors en route)
[WARNING] Global which is neither Integer nor Float
@.str.1 = private unnamed_addr constant [7 x i8] c"main.c\00", align 1
It is not being monitored (there may be errors en route)
[WARNING] Global which is neither Integer nor Float
@__PRETTY_FUNCTION__.f1 = private unnamed_addr constant [17 x i8] c"void *f1(void *)\00", align 1
It is not being monitored (there may be errors en route)
[WARNING] Global which is neither Integer nor Float
@__PRETTY_FUNCTION__.f2 = private unnamed_addr constant [17 x i8] c"void *f2(void *)\00", align 1
It is not being monitored (there may be errors en route)
[WARNING] Global which is neither Integer nor Float
@__PRETTY_FUNCTION__.f3 = private unnamed_addr constant [17 x i8] c"void *f3(void *)\00", align 1
It is not being monitored (there may be errors en route)
[WARNING] Global which is neither Integer nor Float
@__PRETTY_FUNCTION__.f4 = private unnamed_addr constant [17 x i8] c"void *f4(void *)\00", align 1
It is not being monitored (there may be errors en route)
Rules: (declare-fun dom ((_ BitVec 16) (_ BitVec 16)) Bool)
(declare-fun postDom ((_ BitVec 16) (_ BitVec 16)) Bool)
(declare-fun higher ((_ BitVec 16) (_ BitVec 16)) Bool)
(declare-fun pri ((_ BitVec 16)) Bool)
(declare-fun linehigh ((_ BitVec 16) (_ BitVec 16)) Bool)
(declare-fun ld ((_ BitVec 16) (_ BitVec 16)) Bool)
(declare-fun linepri ((_ BitVec 16) (_ BitVec 16)) Bool)
(declare-fun st ((_ BitVec 16) (_ BitVec 16)) Bool)
(declare-fun nonLastSt ((_ BitVec 16)) Bool)
(declare-fun compLd ((_ BitVec 16)) Bool)
(declare-rel st ((_ BitVec 16) (_ BitVec 16)))
(declare-rel dom ((_ BitVec 16) (_ BitVec 16)))
(declare-rel postDom ((_ BitVec 16) (_ BitVec 16)))
(declare-rel higher ((_ BitVec 16) (_ BitVec 16)))
(declare-rel pri ((_ BitVec 16)))
(declare-rel linehigh ((_ BitVec 16) (_ BitVec 16)))
(declare-rel ld ((_ BitVec 16) (_ BitVec 16)))
(declare-rel nonLastSt ((_ BitVec 16)))
(declare-rel compLd ((_ BitVec 16)))
(declare-rel linepri ((_ BitVec 16) (_ BitVec 16)))
(declare-var A (_ BitVec 16))
(declare-var B (_ BitVec 16))
(declare-var C (_ BitVec 16))
(declare-var D (_ BitVec 16))
(declare-var E (_ BitVec 16))
(rule (=> (and (dom B C) (dom A B)) (dom A C)))
(rule (=> (and (postDom B C) (postDom A B)) (postDom A C)))
(rule (=> (and (pri A) (pri B) (= A #x0000) (= B #x0001)) (higher B A)))
(rule (=> (and (pri A) (pri B) (= A #x0001) (= B #x0002)) (higher B A)))
(rule (=> (and (pri A) (pri B) (= A #x0002) (= B #x0003)) (higher B A)))
(rule (=> (and (pri A) (pri B) (= A #x0003) (= B #x0004)) (higher B A)))
(rule (=> (and (pri A) (pri B) (= A #x0004) (= B #x0005)) (higher B A)))
(rule (=> (and (pri A) (pri B) (= A #x0005) (= B #x0006)) (higher B A)))
(rule (=> (and (pri A) (pri B) (= A #x0006) (= B #x0007)) (higher B A)))
(rule (=> (and (pri A) (pri B) (= A #x0007) (= B #x0008)) (higher B A)))
(rule (=> (and (higher B C) (higher A B)) (higher A C)))
(rule (=> (and (st A B) (higher D E) (linepri C E) (linepri A D) (ld C B))
    (linehigh A C)))
(rule (=> (and (st A B) (postDom A C) (st C B)) (nonLastSt C)))
(rule (=> (and (st A B) (dom A C) (ld C B)) (compLd C)))
(rule (postDom #x0024 #x0023))
(rule (dom #x0023 #x0024))
(rule (pri #x0000))
(rule (pri #x0001))
(rule (pri #x0002))
(rule (pri #x0003))
(rule (pri #x0004))
(rule (pri #x0005))
(rule (pri #x0006))
(rule (pri #x0007))
(rule (pri #x0008))
(rule (dom #x0021 #x0022))
(rule (dom #x0021 #x0023))
(rule (postDom #x0022 #x0021))
(rule (linepri #x0020 #x0003))
(rule (ld #x0020 #x000d))
(rule (linepri #x001f #x0003))
(rule (st #x001f #x000d))
(rule (postDom #x0021 #x0020))
(rule (dom #x0020 #x0021))
(rule (postDom #x0020 #x001f))
(rule (dom #x001f #x0020))
(rule (postDom #x001e #x001d))
(rule (dom #x0009 #x000a))
(rule (postDom #x000a #x0009))
(rule (dom #x000a #x000b))
(rule (postDom #x000b #x000a))
(rule (dom #x000b #x000c))
(rule (postDom #x000c #x000b))
(rule (st #x0009 #x000d))
(rule (linepri #x0009 #x0002))
(rule (st #x000a #x000e))
(rule (linepri #x000a #x0002))
(rule (ld #x000b #x000d))
(rule (linepri #x000b #x0002))
(rule (postDom #x000f #x000c))
(rule (dom #x000c #x0010))
(rule (dom #x000c #x000f))
(rule (dom #x0010 #x0011))
(rule (postDom #x0011 #x0010))
(rule (dom #x000f #x0012))
(rule (postDom #x0012 #x000f))
(rule (st #x000f #x000e))
(rule (linepri #x000f #x0002))
(rule (dom #x0013 #x0014))
(rule (postDom #x0014 #x0013))
(rule (dom #x0014 #x0015))
(rule (postDom #x0015 #x0014))
(rule (st #x0013 #x000d))
(rule (linepri #x0013 #x0001))
(rule (ld #x0014 #x000d))
(rule (linepri #x0014 #x0001))
(rule (postDom #x0016 #x0015))
(rule (dom #x0015 #x0017))
(rule (dom #x0015 #x0016))
(rule (dom #x0017 #x0018))
(rule (postDom #x0018 #x0017))
(rule (dom #x0019 #x001a))
(rule (postDom #x001a #x0019))
(rule (dom #x001a #x001b))
(rule (postDom #x001b #x001a))
(rule (st #x0019 #x000e))
(rule (linepri #x0019 #x0001))
(rule (ld #x001a #x000e))
(rule (linepri #x001a #x0001))
(rule (postDom #x001c #x001b))
(rule (dom #x001b #x001d))
(rule (dom #x001b #x001c))
(rule (dom #x001d #x001e))

[WARNING] Initializing unhandled global type: @.str = private unnamed_addr constant [2 x i8] c"0\00", align 1
Setting to default initial value
[WARNING] Initializing unhandled global type: @.str.1 = private unnamed_addr constant [7 x i8] c"main.c\00", align 1
Setting to default initial value
[WARNING] Initializing unhandled global type: @__PRETTY_FUNCTION__.f1 = private unnamed_addr constant [17 x i8] c"void *f1(void *)\00", align 1
Setting to default initial value
[WARNING] Initializing unhandled global type: @__PRETTY_FUNCTION__.f2 = private unnamed_addr constant [17 x i8] c"void *f2(void *)\00", align 1
Setting to default initial value
[WARNING] Initializing unhandled global type: @__PRETTY_FUNCTION__.f3 = private unnamed_addr constant [17 x i8] c"void *f3(void *)\00", align 1
Setting to default initial value
[WARNING] Initializing unhandled global type: @__PRETTY_FUNCTION__.f4 = private unnamed_addr constant [17 x i8] c"void *f4(void *)\00", align 1
Setting to default initial value
Interference Iteration: 1
Analyzing thread: 0
Analyzing thread: 1
Analyzing thread: 2
Analyzing thread: 3
Analyzing thread: 4
Interference Iteration: 2
Analyzing thread: 0
======================================
ID of Load: 11
  %0 = load i32, i32* @a, align 4
ID of Store: 19
  store i32 0, i32* @a, align 4
St is NOT nonLast
Load is completeLoad
st is not higher than ld
======================================
======================================
ID of Load: 11
  %0 = load i32, i32* @a, align 4
ID of Store: 31
  store i32 0, i32* @a, align 4
St is NOT nonLast
Load is completeLoad
st is higher than ld
======================================
Analyzing thread: 1
======================================
ID of Load: 20
  %0 = load i32, i32* @a, align 4
ID of Store: 9
  store i32 1, i32* @a, align 4
St is NOT nonLast
Load is completeLoad
st is higher than ld
======================================
======================================
ID of Load: 20
  %0 = load i32, i32* @a, align 4
ID of Store: 31
  store i32 0, i32* @a, align 4
St is NOT nonLast
Load is completeLoad
st is higher than ld
======================================
Analyzing thread: 2
======================================
ID of Load: 26
  %0 = load i32, i32* @b, align 4
ID of Store: 10
  store i32 1, i32* @b, align 4
St is nonLast
Load is completeLoad
======================================
======================================
ID of Load: 26
  %0 = load i32, i32* @b, align 4
ID of Store: 15
  store i32 0, i32* @b, align 4
St is NOT nonLast
Load is completeLoad
st is higher than ld
======================================
Analyzing thread: 3
======================================
ID of Load: 32
  %0 = load i32, i32* @a, align 4
ID of Store: 9
  store i32 1, i32* @a, align 4
St is NOT nonLast
Load is completeLoad
st is not higher than ld
======================================
======================================
ID of Load: 32
  %0 = load i32, i32* @a, align 4
ID of Store: 19
  store i32 0, i32* @a, align 4
St is NOT nonLast
Load is completeLoad
st is not higher than ld
======================================
Analyzing thread: 4
Interference Iteration: 3
Analyzing thread: 0
Analyzing thread: 1
Analyzing thread: 2
Analyzing thread: 3
Analyzing thread: 4
v12: @a = global i32 0, align 4
v13: @b = global i32 0, align 4
v14: i8* %unused
v0:   %0 = load i32, i32* @a, align 4
v1:   %cmp = icmp ne i32 %0, 1
v16: i8* %1
v17: i32 %2
v15: i8* %0
v18: i8* %3
v19: i8* %unused
v21: i8* %unused
v2:   %0 = load i32, i32* @a, align 4
v3:   %cmp = icmp ne i32 %0, 0
v20: i8* %unused
v23: %union.pthread_attr_t* %1
v4:   %0 = load i32, i32* @b, align 4
v5:   %cmp = icmp ne i32 %0, 0
v22: i64* %0
v6:   %0 = load i32, i32* @a, align 4
v7:   %cmp = icmp ne i32 %0, 0
v8:   %t1 = alloca i64, align 8
v9:   %t2 = alloca i64, align 8
v10:   %t3 = alloca i64, align 8
v11:   %t4 = alloca i64, align 8
v24: i8* (i8*)* %2
v25: i8* %3
==== f1() Results ====
BasicBlock: 
entry:
  store i32 1, i32* @a, align 4
  store i32 1, i32* @b, align 4
  %0 = load i32, i32* @a, align 4
  %cmp = icmp ne i32 %0, 1
  br i1 %cmp, label %if.then, label %if.end
Facts: interval of dim (26,0):
      v0 in [-oo,+oo]
      v1 in [-oo,+oo]
     v10 in [-oo,+oo]
     v11 in [-oo,+oo]
     v12 in [0,0]
     v13 in [0,0]
     v14 in [-oo,+oo]
     v15 in [-oo,+oo]
     v16 in [-oo,+oo]
     v17 in [-oo,+oo]
     v18 in [-oo,+oo]
     v19 in [-oo,+oo]
      v2 in [-oo,+oo]
     v20 in [-oo,+oo]
     v21 in [-oo,+oo]
     v22 in [-oo,+oo]
     v23 in [-oo,+oo]
     v24 in [-oo,+oo]
     v25 in [-oo,+oo]
      v3 in [-oo,+oo]
      v4 in [-oo,+oo]
      v5 in [-oo,+oo]
      v6 in [-oo,+oo]
      v7 in [-oo,+oo]
      v8 in [-oo,+oo]
      v9 in [-oo,+oo]

BasicBlock: 
if.then:                                          ; preds = %entry
  call void @__assert_fail(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i32 22, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @__PRETTY_FUNCTION__.f1, i32 0, i32 0)) #3
  unreachable
Facts: interval of dim (26,0):
      v0 in [0,1]
      v1 in [1,1]
     v10 in [-oo,+oo]
     v11 in [-oo,+oo]
     v12 in [0,1]
     v13 in [1,1]
     v14 in [-oo,+oo]
     v15 in [-oo,+oo]
     v16 in [-oo,+oo]
     v17 in [-oo,+oo]
     v18 in [-oo,+oo]
     v19 in [-oo,+oo]
      v2 in [-oo,+oo]
     v20 in [-oo,+oo]
     v21 in [-oo,+oo]
     v22 in [-oo,+oo]
     v23 in [-oo,+oo]
     v24 in [-oo,+oo]
     v25 in [-oo,+oo]
      v3 in [-oo,+oo]
      v4 in [-oo,+oo]
      v5 in [-oo,+oo]
      v6 in [-oo,+oo]
      v7 in [-oo,+oo]
      v8 in [-oo,+oo]
      v9 in [-oo,+oo]

BasicBlock: 
if.end:                                           ; preds = %entry
  store i32 0, i32* @b, align 4
  ret i8* null
Facts: interval of dim (26,0):
      v0 in [1,1]
      v1 in [0,0]
     v10 in [-oo,+oo]
     v11 in [-oo,+oo]
     v12 in [0,1]
     v13 in [1,1]
     v14 in [-oo,+oo]
     v15 in [-oo,+oo]
     v16 in [-oo,+oo]
     v17 in [-oo,+oo]
     v18 in [-oo,+oo]
     v19 in [-oo,+oo]
      v2 in [-oo,+oo]
     v20 in [-oo,+oo]
     v21 in [-oo,+oo]
     v22 in [-oo,+oo]
     v23 in [-oo,+oo]
     v24 in [-oo,+oo]
     v25 in [-oo,+oo]
      v3 in [-oo,+oo]
      v4 in [-oo,+oo]
      v5 in [-oo,+oo]
      v6 in [-oo,+oo]
      v7 in [-oo,+oo]
      v8 in [-oo,+oo]
      v9 in [-oo,+oo]

======================
==== f2() Results ====
BasicBlock: 
entry:
  store i32 0, i32* @a, align 4
  %0 = load i32, i32* @a, align 4
  %cmp = icmp ne i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end
Facts: interval of dim (26,0):
      v0 in [-oo,+oo]
      v1 in [-oo,+oo]
     v10 in [-oo,+oo]
     v11 in [-oo,+oo]
     v12 in [0,0]
     v13 in [0,0]
     v14 in [-oo,+oo]
     v15 in [-oo,+oo]
     v16 in [-oo,+oo]
     v17 in [-oo,+oo]
     v18 in [-oo,+oo]
     v19 in [-oo,+oo]
      v2 in [-oo,+oo]
     v20 in [-oo,+oo]
     v21 in [-oo,+oo]
     v22 in [-oo,+oo]
     v23 in [-oo,+oo]
     v24 in [-oo,+oo]
     v25 in [-oo,+oo]
      v3 in [-oo,+oo]
      v4 in [-oo,+oo]
      v5 in [-oo,+oo]
      v6 in [-oo,+oo]
      v7 in [-oo,+oo]
      v8 in [-oo,+oo]
      v9 in [-oo,+oo]

BasicBlock: 
if.then:                                          ; preds = %entry
  call void @__assert_fail(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i32 39, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @__PRETTY_FUNCTION__.f2, i32 0, i32 0)) #3
  unreachable
Facts: interval of dim (26,0):
      v0 in [-oo,+oo]
      v1 in [-oo,+oo]
     v10 in [-oo,+oo]
     v11 in [-oo,+oo]
     v12 in [0,1]
     v13 in [0,0]
     v14 in [-oo,+oo]
     v15 in [-oo,+oo]
     v16 in [-oo,+oo]
     v17 in [-oo,+oo]
     v18 in [-oo,+oo]
     v19 in [-oo,+oo]
      v2 in [0,1]
     v20 in [-oo,+oo]
     v21 in [-oo,+oo]
     v22 in [-oo,+oo]
     v23 in [-oo,+oo]
     v24 in [-oo,+oo]
     v25 in [-oo,+oo]
      v3 in [1,1]
      v4 in [-oo,+oo]
      v5 in [-oo,+oo]
      v6 in [-oo,+oo]
      v7 in [-oo,+oo]
      v8 in [-oo,+oo]
      v9 in [-oo,+oo]

BasicBlock: 
if.end:                                           ; preds = %entry
  ret i8* null
Facts: interval of dim (26,0):
      v0 in [-oo,+oo]
      v1 in [-oo,+oo]
     v10 in [-oo,+oo]
     v11 in [-oo,+oo]
     v12 in [0,1]
     v13 in [0,0]
     v14 in [-oo,+oo]
     v15 in [-oo,+oo]
     v16 in [-oo,+oo]
     v17 in [-oo,+oo]
     v18 in [-oo,+oo]
     v19 in [-oo,+oo]
      v2 in [0,0]
     v20 in [-oo,+oo]
     v21 in [-oo,+oo]
     v22 in [-oo,+oo]
     v23 in [-oo,+oo]
     v24 in [-oo,+oo]
     v25 in [-oo,+oo]
      v3 in [0,0]
      v4 in [-oo,+oo]
      v5 in [-oo,+oo]
      v6 in [-oo,+oo]
      v7 in [-oo,+oo]
      v8 in [-oo,+oo]
      v9 in [-oo,+oo]

======================
==== f3() Results ====
BasicBlock: 
entry:
  store i32 0, i32* @b, align 4
  %0 = load i32, i32* @b, align 4
  %cmp = icmp ne i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end
Facts: interval of dim (26,0):
      v0 in [-oo,+oo]
      v1 in [-oo,+oo]
     v10 in [-oo,+oo]
     v11 in [-oo,+oo]
     v12 in [0,0]
     v13 in [0,0]
     v14 in [-oo,+oo]
     v15 in [-oo,+oo]
     v16 in [-oo,+oo]
     v17 in [-oo,+oo]
     v18 in [-oo,+oo]
     v19 in [-oo,+oo]
      v2 in [-oo,+oo]
     v20 in [-oo,+oo]
     v21 in [-oo,+oo]
     v22 in [-oo,+oo]
     v23 in [-oo,+oo]
     v24 in [-oo,+oo]
     v25 in [-oo,+oo]
      v3 in [-oo,+oo]
      v4 in [-oo,+oo]
      v5 in [-oo,+oo]
      v6 in [-oo,+oo]
      v7 in [-oo,+oo]
      v8 in [-oo,+oo]
      v9 in [-oo,+oo]

BasicBlock: 
if.then:                                          ; preds = %entry
  call void @__assert_fail(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i32 55, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @__PRETTY_FUNCTION__.f3, i32 0, i32 0)) #3
  unreachable
Facts: interval of dim (26,0): bottom

BasicBlock: 
if.end:                                           ; preds = %entry
  ret i8* null
Facts: interval of dim (26,0):
      v0 in [-oo,+oo]
      v1 in [-oo,+oo]
     v10 in [-oo,+oo]
     v11 in [-oo,+oo]
     v12 in [0,0]
     v13 in [0,0]
     v14 in [-oo,+oo]
     v15 in [-oo,+oo]
     v16 in [-oo,+oo]
     v17 in [-oo,+oo]
     v18 in [-oo,+oo]
     v19 in [-oo,+oo]
      v2 in [-oo,+oo]
     v20 in [-oo,+oo]
     v21 in [-oo,+oo]
     v22 in [-oo,+oo]
     v23 in [-oo,+oo]
     v24 in [-oo,+oo]
     v25 in [-oo,+oo]
      v3 in [-oo,+oo]
      v4 in [0,0]
      v5 in [0,0]
      v6 in [-oo,+oo]
      v7 in [-oo,+oo]
      v8 in [-oo,+oo]
      v9 in [-oo,+oo]

======================
==== f4() Results ====
BasicBlock: 
entry:
  store i32 0, i32* @a, align 4
  %0 = load i32, i32* @a, align 4
  %cmp = icmp ne i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end
Facts: interval of dim (26,0):
      v0 in [-oo,+oo]
      v1 in [-oo,+oo]
     v10 in [-oo,+oo]
     v11 in [-oo,+oo]
     v12 in [0,0]
     v13 in [0,0]
     v14 in [-oo,+oo]
     v15 in [-oo,+oo]
     v16 in [-oo,+oo]
     v17 in [-oo,+oo]
     v18 in [-oo,+oo]
     v19 in [-oo,+oo]
      v2 in [-oo,+oo]
     v20 in [-oo,+oo]
     v21 in [-oo,+oo]
     v22 in [-oo,+oo]
     v23 in [-oo,+oo]
     v24 in [-oo,+oo]
     v25 in [-oo,+oo]
      v3 in [-oo,+oo]
      v4 in [-oo,+oo]
      v5 in [-oo,+oo]
      v6 in [-oo,+oo]
      v7 in [-oo,+oo]
      v8 in [-oo,+oo]
      v9 in [-oo,+oo]

BasicBlock: 
if.then:                                          ; preds = %entry
  call void @__assert_fail(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i32 71, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @__PRETTY_FUNCTION__.f4, i32 0, i32 0)) #3
  unreachable
Facts: interval of dim (26,0): bottom

BasicBlock: 
if.end:                                           ; preds = %entry
  ret i8* null
Facts: interval of dim (26,0):
      v0 in [-oo,+oo]
      v1 in [-oo,+oo]
     v10 in [-oo,+oo]
     v11 in [-oo,+oo]
     v12 in [0,0]
     v13 in [0,0]
     v14 in [-oo,+oo]
     v15 in [-oo,+oo]
     v16 in [-oo,+oo]
     v17 in [-oo,+oo]
     v18 in [-oo,+oo]
     v19 in [-oo,+oo]
      v2 in [-oo,+oo]
     v20 in [-oo,+oo]
     v21 in [-oo,+oo]
     v22 in [-oo,+oo]
     v23 in [-oo,+oo]
     v24 in [-oo,+oo]
     v25 in [-oo,+oo]
      v3 in [-oo,+oo]
      v4 in [-oo,+oo]
      v5 in [-oo,+oo]
      v6 in [0,0]
      v7 in [0,0]
      v8 in [-oo,+oo]
      v9 in [-oo,+oo]

======================
==== main() Results ====
BasicBlock: 
entry:
  %t1 = alloca i64, align 8
  %t2 = alloca i64, align 8
  %t3 = alloca i64, align 8
  %t4 = alloca i64, align 8
  %call = call i32 @pthread_create(i64* %t1, %union.pthread_attr_t* null, i8* (i8*)* @f1, i8* null) #3
  %call1 = call i32 @pthread_create(i64* %t2, %union.pthread_attr_t* null, i8* (i8*)* @f2, i8* null) #3
  %call2 = call i32 @pthread_create(i64* %t3, %union.pthread_attr_t* null, i8* (i8*)* @f3, i8* null) #3
  %call3 = call i32 @pthread_create(i64* %t4, %union.pthread_attr_t* null, i8* (i8*)* @f4, i8* null) #3
  ret i32 0
Facts: interval of dim (26,0):
      v0 in [-oo,+oo]
      v1 in [-oo,+oo]
     v10 in [-oo,+oo]
     v11 in [-oo,+oo]
     v12 in [0,0]
     v13 in [0,0]
     v14 in [-oo,+oo]
     v15 in [-oo,+oo]
     v16 in [-oo,+oo]
     v17 in [-oo,+oo]
     v18 in [-oo,+oo]
     v19 in [-oo,+oo]
      v2 in [-oo,+oo]
     v20 in [-oo,+oo]
     v21 in [-oo,+oo]
     v22 in [-oo,+oo]
     v23 in [-oo,+oo]
     v24 in [-oo,+oo]
     v25 in [-oo,+oo]
      v3 in [-oo,+oo]
      v4 in [-oo,+oo]
      v5 in [-oo,+oo]
      v6 in [-oo,+oo]
      v7 in [-oo,+oo]
      v8 in [-oo,+oo]
      v9 in [-oo,+oo]

======================
[WARNING] Value not dumped to metadata: @a = global i32 0, align 4
	type not handled
[WARNING] Value not dumped to metadata: @b = global i32 0, align 4
	type not handled
Errors found: 2
Max Permutations: 0
Total pairs: 16
Filtered pairs: 8
