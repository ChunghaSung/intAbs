[WARNING] Global which is neither Integer nor Float
@.str = private unnamed_addr constant [2 x i8] c"0\00", align 1
It is not being monitored (there may be errors en route)
[WARNING] Global which is neither Integer nor Float
@.str.1 = private unnamed_addr constant [7 x i8] c"main.c\00", align 1
It is not being monitored (there may be errors en route)
[WARNING] Global which is neither Integer nor Float
@__PRETTY_FUNCTION__.f2 = private unnamed_addr constant [17 x i8] c"void *f2(void *)\00", align 1
It is not being monitored (there may be errors en route)
Rules: (declare-fun dom ((_ BitVec 16) (_ BitVec 16)) Bool)
(declare-fun postDom ((_ BitVec 16) (_ BitVec 16)) Bool)
(declare-fun st ((_ BitVec 16) (_ BitVec 16)) Bool)
(declare-fun ld ((_ BitVec 16) (_ BitVec 16)) Bool)
(declare-rel ld ((_ BitVec 16) (_ BitVec 16)))
(declare-rel dom ((_ BitVec 16) (_ BitVec 16)))
(declare-rel postDom ((_ BitVec 16) (_ BitVec 16)))
(declare-rel st ((_ BitVec 16) (_ BitVec 16)))
(declare-var A (_ BitVec 16))
(declare-var B (_ BitVec 16))
(declare-var C (_ BitVec 16))
(rule (=> (and (dom B C) (dom A B)) (dom A C)))
(rule (=> (and (postDom B C) (postDom A B)) (postDom A C)))
(rule (st #x0019 #x001b))
(rule (ld #x0017 #x001b))
(rule (dom #x0009 #x000a))
(rule (postDom #x000a #x0009))
(rule (dom #x000a #x000b))
(rule (postDom #x000b #x000a))
(rule (dom #x000b #x000c))
(rule (postDom #x000c #x000b))
(rule (dom #x000c #x000d))
(rule (postDom #x000d #x000c))
(rule (dom #x000d #x000e))
(rule (postDom #x000e #x000d))
(rule (dom #x000e #x000f))
(rule (postDom #x000f #x000e))
(rule (ld #x0009 #x0010))
(rule (st #x000a #x0010))
(rule (ld #x000b #x0011))
(rule (st #x000c #x0011))
(rule (ld #x000d #x0010))
(rule (st #x000e #x0010))
(rule (dom #x0012 #x0013))
(rule (postDom #x0013 #x0012))
(rule (ld #x0012 #x0010))
(rule (postDom #x0014 #x0013))
(rule (dom #x0013 #x0015))
(rule (dom #x0013 #x0014))
(rule (dom #x0014 #x0016))
(rule (postDom #x0016 #x0014))
(rule (ld #x0014 #x0010))
(rule (dom #x0016 #x0017))
(rule (dom #x0015 #x0018))
(rule (postDom #x0018 #x0015))
(rule (dom #x0017 #x0019))
(rule (postDom #x0019 #x0017))
(rule (dom #x0019 #x001a))
(rule (postDom #x001a #x0019))

[WARNING] Initializing unhandled global type: @.str = private unnamed_addr constant [2 x i8] c"0\00", align 1
Setting to default initial value
[WARNING] Initializing unhandled global type: @.str.1 = private unnamed_addr constant [7 x i8] c"main.c\00", align 1
Setting to default initial value
[WARNING] Initializing unhandled global type: @__PRETTY_FUNCTION__.f2 = private unnamed_addr constant [17 x i8] c"void *f2(void *)\00", align 1
Setting to default initial value
Interference Iteration: 1
Analyzing thread: 0
Analyzing thread: 1
Analyzing thread: 2
Interference Iteration: 2
Analyzing thread: 0
Analyzing thread: 1
Analyzing thread: 2
v13: @a = global i32 0, align 4
v22: i8* %0
v14: @cnt1 = common global i32 0, align 4
v20: i8* %unused
v15: @cnt2 = common global i32 0, align 4
v16: @a_temp = common global i32 0, align 4
v17: @r1 = common global i32 0, align 4
v18: @r2 = common global i32 0, align 4
v19: @r3 = common global i32 0, align 4
v0:   %0 = load i32, i32* @a, align 4
v1:   %inc = add nsw i32 %0, 1
v2:   %1 = load i32, i32* @cnt1, align 4
v3:   %inc1 = add nsw i32 %1, 1
v4:   %2 = load i32, i32* @a, align 4
v21: i8* %unused
v5:   %0 = load i32, i32* @a, align 4
v6:   %cmp = icmp ne i32 %0, 2
v24: i32 %2
v7:   %1 = load i32, i32* @a, align 4
v8:   %cmp1 = icmp ne i32 %1, 0
v23: i8* %1
v9:   %2 = load i32, i32* @cnt2, align 4
v10:   %inc = add nsw i32 %2, 1
v25: i8* %3
v11:   %t1 = alloca i64, align 8
v12:   %t2 = alloca i64, align 8
v26: i64* %0
v27: %union.pthread_attr_t* %1
v28: i8* (i8*)* %2
v29: i8* %3
==== f1() Results ====
BasicBlock: 
entry:
  %0 = load i32, i32* @a, align 4
  %inc = add nsw i32 %0, 1
  store i32 %inc, i32* @a, align 4
  %1 = load i32, i32* @cnt1, align 4
  %inc1 = add nsw i32 %1, 1
  store i32 %inc1, i32* @cnt1, align 4
  %2 = load i32, i32* @a, align 4
  store i32 %2, i32* @a, align 4
  ret i8* null
Facts: interval of dim (30,0):
      v0 in [-oo,+oo]
      v1 in [-oo,+oo]
     v10 in [-oo,+oo]
     v11 in [-oo,+oo]
     v12 in [-oo,+oo]
     v13 in [0,0]
     v14 in [0,0]
     v15 in [0,0]
     v16 in [0,0]
     v17 in [0,0]
     v18 in [0,0]
     v19 in [0,0]
      v2 in [-oo,+oo]
     v20 in [-oo,+oo]
     v21 in [-oo,+oo]
     v22 in [-oo,+oo]
     v23 in [-oo,+oo]
     v24 in [-oo,+oo]
     v25 in [-oo,+oo]
     v26 in [-oo,+oo]
     v27 in [-oo,+oo]
     v28 in [-oo,+oo]
     v29 in [-oo,+oo]
      v3 in [-oo,+oo]
      v4 in [-oo,+oo]
      v5 in [-oo,+oo]
      v6 in [-oo,+oo]
      v7 in [-oo,+oo]
      v8 in [-oo,+oo]
      v9 in [-oo,+oo]

======================
==== f2() Results ====
BasicBlock: 
entry:
  %0 = load i32, i32* @a, align 4
  %cmp = icmp ne i32 %0, 2
  br i1 %cmp, label %if.then, label %lor.lhs.false
Facts: interval of dim (30,0):
      v0 in [-oo,+oo]
      v1 in [-oo,+oo]
     v10 in [-oo,+oo]
     v11 in [-oo,+oo]
     v12 in [-oo,+oo]
     v13 in [0,0]
     v14 in [0,0]
     v15 in [0,0]
     v16 in [0,0]
     v17 in [0,0]
     v18 in [0,0]
     v19 in [0,0]
      v2 in [-oo,+oo]
     v20 in [-oo,+oo]
     v21 in [-oo,+oo]
     v22 in [-oo,+oo]
     v23 in [-oo,+oo]
     v24 in [-oo,+oo]
     v25 in [-oo,+oo]
     v26 in [-oo,+oo]
     v27 in [-oo,+oo]
     v28 in [-oo,+oo]
     v29 in [-oo,+oo]
      v3 in [-oo,+oo]
      v4 in [-oo,+oo]
      v5 in [-oo,+oo]
      v6 in [-oo,+oo]
      v7 in [-oo,+oo]
      v8 in [-oo,+oo]
      v9 in [-oo,+oo]

BasicBlock: 
if.then:                                          ; preds = %lor.lhs.false, %entry
  call void @__assert_fail(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i32 32, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @__PRETTY_FUNCTION__.f2, i32 0, i32 0)) #3
  unreachable
Facts: interval of dim (30,0):
      v0 in [-oo,+oo]
      v1 in [-oo,+oo]
     v10 in [-oo,+oo]
     v11 in [-oo,+oo]
     v12 in [-oo,+oo]
     v13 in [0,1]
     v14 in [0,0]
     v15 in [0,0]
     v16 in [0,0]
     v17 in [0,0]
     v18 in [0,0]
     v19 in [0,0]
      v2 in [-oo,+oo]
     v20 in [-oo,+oo]
     v21 in [-oo,+oo]
     v22 in [-oo,+oo]
     v23 in [-oo,+oo]
     v24 in [-oo,+oo]
     v25 in [-oo,+oo]
     v26 in [-oo,+oo]
     v27 in [-oo,+oo]
     v28 in [-oo,+oo]
     v29 in [-oo,+oo]
      v3 in [-oo,+oo]
      v4 in [-oo,+oo]
      v5 in [0,1]
      v6 in [1,1]
      v7 in [-oo,+oo]
      v8 in [-oo,+oo]
      v9 in [-oo,+oo]

BasicBlock: 
lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* @a, align 4
  %cmp1 = icmp ne i32 %1, 0
  br i1 %cmp1, label %if.then, label %if.end
Facts: interval of dim (30,0): bottom

BasicBlock: 
if.end:                                           ; preds = %lor.lhs.false
  %2 = load i32, i32* @cnt2, align 4
  %inc = add nsw i32 %2, 1
  store i32 %inc, i32* @cnt2, align 4
  ret i8* null
Facts: interval of dim (30,0): bottom

======================
==== main() Results ====
BasicBlock: 
entry:
  %t1 = alloca i64, align 8
  %t2 = alloca i64, align 8
  %call = call i32 @pthread_create(i64* %t1, %union.pthread_attr_t* null, i8* (i8*)* @f1, i8* null) #3
  %call1 = call i32 @pthread_create(i64* %t2, %union.pthread_attr_t* null, i8* (i8*)* @f2, i8* null) #3
  ret i32 0
Facts: interval of dim (30,0):
      v0 in [-oo,+oo]
      v1 in [-oo,+oo]
     v10 in [-oo,+oo]
     v11 in [-oo,+oo]
     v12 in [-oo,+oo]
     v13 in [0,0]
     v14 in [0,0]
     v15 in [0,0]
     v16 in [0,0]
     v17 in [0,0]
     v18 in [0,0]
     v19 in [0,0]
      v2 in [-oo,+oo]
     v20 in [-oo,+oo]
     v21 in [-oo,+oo]
     v22 in [-oo,+oo]
     v23 in [-oo,+oo]
     v24 in [-oo,+oo]
     v25 in [-oo,+oo]
     v26 in [-oo,+oo]
     v27 in [-oo,+oo]
     v28 in [-oo,+oo]
     v29 in [-oo,+oo]
      v3 in [-oo,+oo]
      v4 in [-oo,+oo]
      v5 in [-oo,+oo]
      v6 in [-oo,+oo]
      v7 in [-oo,+oo]
      v8 in [-oo,+oo]
      v9 in [-oo,+oo]

======================
[WARNING] Value not dumped to metadata: @a = global i32 0, align 4
	type not handled
[WARNING] Value not dumped to metadata: @cnt1 = common global i32 0, align 4
	type not handled
[WARNING] Value not dumped to metadata: @cnt2 = common global i32 0, align 4
	type not handled
Errors found: 1
Max Permutations: 0
Total pairs: 0
Filtered pairs: 0
